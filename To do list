import json
from datetime import datetime

class Task:
    def __init__(self, name, description, priority, due_date, completed=False):
        self.name = name
        self.description = description
        self.priority = priority
        self.due_date = due_date
        self.completed = completed

def input_date(prompt):
    while True:
        try:
            date_str = input(prompt)
            date = datetime.strptime(date_str, "%Y-%m-%d").date()
            return date
        except ValueError:
            print("Invalid date format. Please use yyyy-mm-dd.")

def collect_task_info():
    task_info = {}
    task_info["name"] = input("Enter task name: ")
    task_info["description"] = input("Enter task description: ")
    task_info["priority"] = input("Enter task priority: ")
    task_info["due_date"] = input_date("Enter due date (yyyy-mm-dd): ")
    return task_info

def add_task(task_list, task_info):
    task = Task(**task_info)
    task_list.append(task)

def remove_task(task_list, task_name):
    task_list[:] = [task for task in task_list if task.name != task_name]

def mark_task_as_completed(task_list, task_name):
    for task in task_list:
        if task.name == task_name:
            task.completed = True
            break

def display_tasks(task_list):
    for task in task_list:
        print(f"Task: {task.name}")
        print(f"Description: {task.description}")
        print(f"Priority: {task.priority}")
        print(f"Due Date: {task.due_date}")
        print(f"Completed: {'Yes' if task.completed else 'No'}")
        print("")

def save_tasks_to_file(task_list, filename):
    task_data = [{"name": task.name, "description": task.description, "priority": task.priority,
                  "due_date": task.due_date.strftime("%Y-%m-%d"), "completed": task.completed}
                 for task in task_list]

    with open(filename, 'w') as file:
        json.dump(task_data, file)

def load_tasks_from_file(filename):
    task_list = []
    try:
        with open(filename, 'r') as file:
            task_data = json.load(file)
            for data in task_data:
                task = Task(**data)
                task_list.append(task)
    except FileNotFoundError:
        pass  # If the file doesn't exist, return an empty list
    return task_list

def display_menu():
    print("Task Management Menu:")
    print("1. Add a task")
    print("2. Remove a task")
    print("3. Mark a task as completed")
    print("4. Display tasks")
    print("5. Save tasks to a file")
    print("6. Load tasks from a file")
    print("7. Exit")

if __name__ == "__main__":
    task_list = []  # Initialize an empty task list
    filename = "tasks.json"  # Specify the filename for data persistence

    # Load tasks from a file if the file exists
    task_list = load_tasks_from_file(filename)

    while True:
        display_menu()
        choice = input("Enter your choice: ")

        if choice == "1":
            task_info = collect_task_info()
            add_task(task_list, task_info)
        elif choice == "2":
            task_name = input("Enter the name of the task to remove: ")
            remove_task(task_list, task_name)
        elif choice == "3":
            task_name = input("Enter the name of the task to mark as completed: ")
            mark_task_as_completed(task_list, task_name)
        elif choice == "4":
            display_tasks(task_list)
        elif choice == "5":
            save_tasks_to_file(task_list, filename)
        elif choice == "6":
            task_list = load_tasks_from_file(filename)
        elif choice == "7":
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")
